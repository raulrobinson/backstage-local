"use strict";(()=>{var zr=Object.defineProperty;var Wr=(L,A,_)=>A in L?zr(L,A,{enumerable:!0,configurable:!0,writable:!0,value:_}):L[A]=_;var K=(L,A,_)=>(Wr(L,typeof A!="symbol"?A+"":A,_),_),Fr=(L,A,_)=>{if(!A.has(L))throw TypeError("Cannot "+_)};var r=(L,A,_)=>(Fr(L,A,"read from private field"),_?_.call(L):A.get(L)),v=(L,A,_)=>{if(A.has(L))throw TypeError("Cannot add the same private member more than once");A instanceof WeakSet?A.add(L):A.set(L,_)},y=(L,A,_,W)=>(Fr(L,A,"write to private field"),W?W.call(L,_):A.set(L,_),_),Sr=(L,A,_,W)=>({set _(oe){y(L,A,oe,_)},get _(){return r(L,A,W)}}),b=(L,A,_)=>(Fr(L,A,"access private method"),_);(self.webpackChunkapp=self.webpackChunkapp||[]).push([[1410],{42851:function(L,A,_){var Lr,lr,Re,Ge,ze,Fe,ur,Q,Ue,ee,H,S,ge,ke,pe,te,De,ne,Ve,Me,Ce,We,Xe,Ee,mr,Ur,nr,Ke,Tr,ye,kr,qr,ir,dr,Er,Be,Ze,He,Qe,fr,Dr,gr,vr,hr,Pr,z,N,wr,Cr,ar,_r;_.d(A,{i:function(){return $r}});var W=_(7502),oe=_(31765),x=_(23531),q=_.n(x),V=_(78084);async function B(t,e){const s=j(t,e.auth);if(s)return s;const{data:o}=await(0,V.TG)({clientType:t.clientType,clientId:t.clientId,request:e.request||t.request,scopes:e.auth.scopes||t.scopes});await t.onVerification(o);const n=await re(e.request||t.request,t.clientId,t.clientType,o);return t.authentication=n,n}function j(t,e){if(e.refresh===!0||!t.authentication)return!1;if(t.clientType==="github-app")return t.authentication;const s=t.authentication,o=("scopes"in e&&e.scopes||t.scopes).join(" "),n=s.scopes.join(" ");return o===n?s:!1}async function fe(t){await new Promise(e=>setTimeout(e,t*1e3))}async function re(t,e,s,o){try{const n={clientId:e,request:t,code:o.device_code},{authentication:i}=s==="oauth-app"?await(0,V.i7)({...n,clientType:"oauth-app"}):await(0,V.i7)({...n,clientType:"github-app"});return{type:"token",tokenType:"oauth",...i}}catch(n){if(!n.response)throw n;const i=n.response.data.error;if(i==="authorization_pending")return await fe(o.interval),re(t,e,s,o);if(i==="slow_down")return await fe(o.interval+5),re(t,e,s,o);throw n}}async function se(t,e){return B(t,{auth:e})}async function me(t,e,s,o){let n=e.endpoint.merge(s,o);if(/\/login\/(oauth\/access_token|device\/code)$/.test(n.url))return e(n);const{token:i}=await B(t,{request:e,auth:{type:"oauth"}});return n.headers.authorization=`token ${i}`,e(n)}const we="4.0.4";function Se(t){const e=t.request||oe.request.defaults({headers:{"user-agent":`octokit-auth-oauth-device.js/${we} ${(0,W.i)()}`}}),{request:s=e,...o}=t,n=t.clientType==="github-app"?{...o,clientType:"github-app",request:s}:{...o,clientType:"oauth-app",request:s,scopes:t.scopes||[]};if(!t.clientId)throw new Error('[@octokit/auth-oauth-device] "clientId" option must be set (https://github.com/octokit/auth-oauth-device.js#usage)');if(!t.onVerification)throw new Error('[@octokit/auth-oauth-device] "onVerification" option must be a function (https://github.com/octokit/auth-oauth-device.js#usage)');return Object.assign(se.bind(null,n),{hook:me.bind(null,n)})}const ve="2.1.1";async function Te(t){if("code"in t.strategyOptions){const{authentication:e}=await(0,V.yi)({clientId:t.clientId,clientSecret:t.clientSecret,clientType:t.clientType,onTokenCreated:t.onTokenCreated,...t.strategyOptions,request:t.request});return{type:"token",tokenType:"oauth",...e}}if("onVerification"in t.strategyOptions){const s=await Se({clientType:t.clientType,clientId:t.clientId,onTokenCreated:t.onTokenCreated,...t.strategyOptions,request:t.request})({type:"oauth"});return{clientSecret:t.clientSecret,...s}}if("token"in t.strategyOptions)return{type:"token",tokenType:"oauth",clientId:t.clientId,clientSecret:t.clientSecret,clientType:t.clientType,onTokenCreated:t.onTokenCreated,...t.strategyOptions};throw new Error("[@octokit/auth-oauth-user] Invalid strategy options")}async function Pe(t,e={}){var o,n;if(t.authentication||(t.authentication=t.clientType==="oauth-app"?await Te(t):await Te(t)),t.authentication.invalid)throw new Error("[@octokit/auth-oauth-user] Token is invalid");const s=t.authentication;if("expiresAt"in s&&(e.type==="refresh"||new Date(s.expiresAt)<new Date)){const{authentication:i}=await(0,V.g$)({clientType:"github-app",clientId:t.clientId,clientSecret:t.clientSecret,refreshToken:s.refreshToken,request:t.request});t.authentication={tokenType:"oauth",type:"token",...i}}if(e.type==="refresh"){if(t.clientType==="oauth-app")throw new Error("[@octokit/auth-oauth-user] OAuth Apps do not support expiring tokens");if(!s.hasOwnProperty("expiresAt"))throw new Error("[@octokit/auth-oauth-user] Refresh token missing");await((o=t.onTokenCreated)==null?void 0:o.call(t,t.authentication,{type:e.type}))}if(e.type==="check"||e.type==="reset"){const i=e.type==="check"?V.a_:V.Eu;try{const{authentication:l}=await i({clientType:t.clientType,clientId:t.clientId,clientSecret:t.clientSecret,token:t.authentication.token,request:t.request});return t.authentication={tokenType:"oauth",type:"token",...l},e.type==="reset"&&await((n=t.onTokenCreated)==null?void 0:n.call(t,t.authentication,{type:e.type})),t.authentication}catch(l){throw l.status===404&&(l.message="[@octokit/auth-oauth-user] Token is invalid",t.authentication.invalid=!0),l}}if(e.type==="delete"||e.type==="deleteAuthorization"){const i=e.type==="delete"?V.pQ:V.sA;try{await i({clientType:t.clientType,clientId:t.clientId,clientSecret:t.clientSecret,token:t.authentication.token,request:t.request})}catch(l){if(l.status!==404)throw l}return t.authentication.invalid=!0,t.authentication}return t.authentication}const er=/\/applications\/[^/]+\/(token|grant)s?/;function Ie(t){return t&&er.test(t)}async function rr(t,e,s,o={}){const n=e.endpoint.merge(s,o);if(/\/login\/(oauth\/access_token|device\/code)$/.test(n.url))return e(n);if(Ie(n.url)){const l=q()(`${t.clientId}:${t.clientSecret}`);return n.headers.authorization=`basic ${l}`,e(n)}const{token:i}=t.clientType==="oauth-app"?await Pe({...t,request:e}):await Pe({...t,request:e});return n.headers.authorization="token "+i,e(n)}function Le({clientId:t,clientSecret:e,clientType:s="oauth-app",request:o=oe.request.defaults({headers:{"user-agent":`octokit-auth-oauth-app.js/${ve} ${(0,W.i)()}`}}),onTokenCreated:n,...i}){const l=Object.assign({clientType:s,clientId:t,clientSecret:e,onTokenCreated:n,strategyOptions:i,request:o});return Object.assign(Pe.bind(null,l),{hook:rr.bind(null,l)})}Le.VERSION=ve;async function Ye(t,e){if(e.type==="oauth-app")return{type:"oauth-app",clientId:t.clientId,clientSecret:t.clientSecret,clientType:t.clientType,headers:{authorization:`basic ${q()(`${t.clientId}:${t.clientSecret}`)}`}};if("factory"in e){const{type:n,...i}={...e,...t};return e.factory(i)}const s={clientId:t.clientId,clientSecret:t.clientSecret,request:t.request,...e};return(t.clientType==="oauth-app"?await Le({...s,clientType:t.clientType}):await Le({...s,clientType:t.clientType}))()}async function qe(t,e,s,o){let n=e.endpoint.merge(s,o);if(/\/login\/(oauth\/access_token|device\/code)$/.test(n.url))return e(n);if(t.clientType==="github-app"&&!Ie(n.url))throw new Error(`[@octokit/auth-oauth-app] GitHub Apps cannot use their client ID/secret for basic authentication for endpoints other than "/applications/{client_id}/**". "${n.method} ${n.url}" is not supported.`);const i=q()(`${t.clientId}:${t.clientSecret}`);n.headers.authorization=`basic ${i}`;try{return await e(n)}catch(l){throw l.status!==401||(l.message=`[@octokit/auth-oauth-app] "${n.method} ${n.url}" does not support clientId/clientSecret basic authentication.`),l}}const u="5.0.5";function F(t){const e=Object.assign({request:oe.request.defaults({headers:{"user-agent":`octokit-auth-oauth-app.js/${u} ${(0,W.i)()}`}}),clientType:"oauth-app"},t);return Object.assign(Ye.bind(null,e),{hook:qe.bind(null,e)})}var G=_(91346),O=_(6990),D=_(34406);const de=typeof performance=="object"&&performance&&typeof performance.now=="function"?performance:Date,_e=new Set,sr=typeof D=="object"&&D?D:{},Oe=(t,e,s,o)=>{typeof sr.emitWarning=="function"?sr.emitWarning(t,e,s,o):console.error(`[${s}] ${e}: ${t}`)};let je=globalThis.AbortController,Ne=globalThis.AbortSignal;if(typeof je=="undefined"){Ne=class{constructor(){K(this,"onabort");K(this,"_onabort",[]);K(this,"reason");K(this,"aborted",!1)}addEventListener(o,n){this._onabort.push(n)}},je=class{constructor(){K(this,"signal",new Ne);e()}abort(o){var n,i;if(!this.signal.aborted){this.signal.reason=o,this.signal.aborted=!0;for(const l of this.signal._onabort)l(o);(i=(n=this.signal).onabort)==null||i.call(n,o)}}};let t=((Lr=sr.env)==null?void 0:Lr.LRU_CACHE_IGNORE_AC_WARNING)!=="1";const e=()=>{t&&(t=!1,Oe("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.","NO_ABORT_CONTROLLER","ENOTSUP",e))}}const cr=t=>!_e.has(t),tr=Symbol("type"),be=t=>t&&t===Math.floor(t)&&t>0&&isFinite(t),c=t=>be(t)?t<=Math.pow(2,8)?Uint8Array:t<=Math.pow(2,16)?Uint16Array:t<=Math.pow(2,32)?Uint32Array:t<=Number.MAX_SAFE_INTEGER?h:null:null;class h extends Array{constructor(e){super(e),this.fill(0)}}const pr=class{constructor(e,s){K(this,"heap");K(this,"length");if(!r(pr,lr))throw new TypeError("instantiate Stack using Stack.create(n)");this.heap=new s(e),this.length=0}static create(e){const s=c(e);if(!s)return[];y(pr,lr,!0);const o=new pr(e,s);return y(pr,lr,!1),o}push(e){this.heap[this.length++]=e}pop(){return this.heap[--this.length]}};let g=pr;lr=new WeakMap,v(g,lr,!1);const Or=class{constructor(e){v(this,mr);v(this,kr);v(this,Be);v(this,He);v(this,fr);v(this,gr);v(this,hr);v(this,z);v(this,wr);v(this,ar);v(this,Re,void 0);v(this,Ge,void 0);v(this,ze,void 0);v(this,Fe,void 0);v(this,ur,void 0);K(this,"ttl");K(this,"ttlResolution");K(this,"ttlAutopurge");K(this,"updateAgeOnGet");K(this,"updateAgeOnHas");K(this,"allowStale");K(this,"noDisposeOnSet");K(this,"noUpdateTTL");K(this,"maxEntrySize");K(this,"sizeCalculation");K(this,"noDeleteOnFetchRejection");K(this,"noDeleteOnStaleGet");K(this,"allowStaleOnFetchAbort");K(this,"allowStaleOnFetchRejection");K(this,"ignoreFetchAbort");v(this,Q,void 0);v(this,Ue,void 0);v(this,ee,void 0);v(this,H,void 0);v(this,S,void 0);v(this,ge,void 0);v(this,ke,void 0);v(this,pe,void 0);v(this,te,void 0);v(this,De,void 0);v(this,ne,void 0);v(this,Ve,void 0);v(this,Me,void 0);v(this,Ce,void 0);v(this,We,void 0);v(this,Xe,void 0);v(this,Ee,void 0);v(this,nr,()=>{});v(this,Ke,()=>{});v(this,Tr,()=>{});v(this,ye,()=>!1);v(this,ir,e=>{});v(this,dr,(e,s,o)=>{});v(this,Er,(e,s,o,n)=>{if(o||n)throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");return 0});const{max:s=0,ttl:o,ttlResolution:n=1,ttlAutopurge:i,updateAgeOnGet:l,updateAgeOnHas:T,allowStale:w,dispose:$,disposeAfter:Y,noDisposeOnSet:C,noUpdateTTL:ie,maxSize:he=0,maxEntrySize:Ae=0,sizeCalculation:U,fetchMethod:J,noDeleteOnFetchRejection:I,noDeleteOnStaleGet:X,allowStaleOnFetchRejection:ae,allowStaleOnFetchAbort:Z,ignoreFetchAbort:ue}=e;if(s!==0&&!be(s))throw new TypeError("max option must be a nonnegative integer");const Je=s?c(s):Array;if(!Je)throw new Error("invalid max value: "+s);if(y(this,Re,s),y(this,Ge,he),this.maxEntrySize=Ae||r(this,Ge),this.sizeCalculation=U,this.sizeCalculation){if(!r(this,Ge)&&!this.maxEntrySize)throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");if(typeof this.sizeCalculation!="function")throw new TypeError("sizeCalculation set to non-function")}if(J!==void 0&&typeof J!="function")throw new TypeError("fetchMethod must be a function if specified");if(y(this,ur,J),y(this,Xe,!!J),y(this,ee,new Map),y(this,H,new Array(s).fill(void 0)),y(this,S,new Array(s).fill(void 0)),y(this,ge,new Je(s)),y(this,ke,new Je(s)),y(this,pe,0),y(this,te,0),y(this,De,g.create(s)),y(this,Q,0),y(this,Ue,0),typeof $=="function"&&y(this,ze,$),typeof Y=="function"?(y(this,Fe,Y),y(this,ne,[])):(y(this,Fe,void 0),y(this,ne,void 0)),y(this,We,!!r(this,ze)),y(this,Ee,!!r(this,Fe)),this.noDisposeOnSet=!!C,this.noUpdateTTL=!!ie,this.noDeleteOnFetchRejection=!!I,this.allowStaleOnFetchRejection=!!ae,this.allowStaleOnFetchAbort=!!Z,this.ignoreFetchAbort=!!ue,this.maxEntrySize!==0){if(r(this,Ge)!==0&&!be(r(this,Ge)))throw new TypeError("maxSize must be a positive integer if specified");if(!be(this.maxEntrySize))throw new TypeError("maxEntrySize must be a positive integer if specified");b(this,kr,qr).call(this)}if(this.allowStale=!!w,this.noDeleteOnStaleGet=!!X,this.updateAgeOnGet=!!l,this.updateAgeOnHas=!!T,this.ttlResolution=be(n)||n===0?n:1,this.ttlAutopurge=!!i,this.ttl=o||0,this.ttl){if(!be(this.ttl))throw new TypeError("ttl must be a positive integer if specified");b(this,mr,Ur).call(this)}if(r(this,Re)===0&&this.ttl===0&&r(this,Ge)===0)throw new TypeError("At least one of max, maxSize, or ttl is required");if(!this.ttlAutopurge&&!r(this,Re)&&!r(this,Ge)){const xe="LRU_CACHE_UNBOUNDED";cr(xe)&&(_e.add(xe),Oe("TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.","UnboundedCacheWarning",xe,Or))}}static unsafeExposeInternals(e){return{starts:r(e,Me),ttls:r(e,Ce),sizes:r(e,Ve),keyMap:r(e,ee),keyList:r(e,H),valList:r(e,S),next:r(e,ge),prev:r(e,ke),get head(){return r(e,pe)},get tail(){return r(e,te)},free:r(e,De),isBackgroundFetch:s=>{var o;return b(o=e,z,N).call(o,s)},backgroundFetch:(s,o,n,i)=>{var l;return b(l=e,hr,Pr).call(l,s,o,n,i)},moveToTail:s=>{var o;return b(o=e,ar,_r).call(o,s)},indexes:s=>{var o;return b(o=e,Be,Ze).call(o,s)},rindexes:s=>{var o;return b(o=e,He,Qe).call(o,s)},isStale:s=>{var o;return r(o=e,ye).call(o,s)}}}get max(){return r(this,Re)}get maxSize(){return r(this,Ge)}get calculatedSize(){return r(this,Ue)}get size(){return r(this,Q)}get fetchMethod(){return r(this,ur)}get dispose(){return r(this,ze)}get disposeAfter(){return r(this,Fe)}getRemainingTTL(e){return r(this,ee).has(e)?1/0:0}*entries(){for(const e of b(this,Be,Ze).call(this))r(this,S)[e]!==void 0&&r(this,H)[e]!==void 0&&!b(this,z,N).call(this,r(this,S)[e])&&(yield[r(this,H)[e],r(this,S)[e]])}*rentries(){for(const e of b(this,He,Qe).call(this))r(this,S)[e]!==void 0&&r(this,H)[e]!==void 0&&!b(this,z,N).call(this,r(this,S)[e])&&(yield[r(this,H)[e],r(this,S)[e]])}*keys(){for(const e of b(this,Be,Ze).call(this)){const s=r(this,H)[e];s!==void 0&&!b(this,z,N).call(this,r(this,S)[e])&&(yield s)}}*rkeys(){for(const e of b(this,He,Qe).call(this)){const s=r(this,H)[e];s!==void 0&&!b(this,z,N).call(this,r(this,S)[e])&&(yield s)}}*values(){for(const e of b(this,Be,Ze).call(this))r(this,S)[e]!==void 0&&!b(this,z,N).call(this,r(this,S)[e])&&(yield r(this,S)[e])}*rvalues(){for(const e of b(this,He,Qe).call(this))r(this,S)[e]!==void 0&&!b(this,z,N).call(this,r(this,S)[e])&&(yield r(this,S)[e])}[Symbol.iterator](){return this.entries()}find(e,s={}){for(const o of b(this,Be,Ze).call(this)){const n=r(this,S)[o],i=b(this,z,N).call(this,n)?n.__staleWhileFetching:n;if(i!==void 0&&e(i,r(this,H)[o],this))return this.get(r(this,H)[o],s)}}forEach(e,s=this){for(const o of b(this,Be,Ze).call(this)){const n=r(this,S)[o],i=b(this,z,N).call(this,n)?n.__staleWhileFetching:n;i!==void 0&&e.call(s,i,r(this,H)[o],this)}}rforEach(e,s=this){for(const o of b(this,He,Qe).call(this)){const n=r(this,S)[o],i=b(this,z,N).call(this,n)?n.__staleWhileFetching:n;i!==void 0&&e.call(s,i,r(this,H)[o],this)}}purgeStale(){let e=!1;for(const s of b(this,He,Qe).call(this,{allowStale:!0}))r(this,ye).call(this,s)&&(this.delete(r(this,H)[s]),e=!0);return e}dump(){const e=[];for(const s of b(this,Be,Ze).call(this,{allowStale:!0})){const o=r(this,H)[s],n=r(this,S)[s],i=b(this,z,N).call(this,n)?n.__staleWhileFetching:n;if(i===void 0||o===void 0)continue;const l={value:i};if(r(this,Ce)&&r(this,Me)){l.ttl=r(this,Ce)[s];const T=de.now()-r(this,Me)[s];l.start=Math.floor(Date.now()-T)}r(this,Ve)&&(l.size=r(this,Ve)[s]),e.unshift([o,l])}return e}load(e){this.clear();for(const[s,o]of e){if(o.start){const n=Date.now()-o.start;o.start=de.now()-n}this.set(s,o.value,o)}}set(e,s,o={}){var ie,he,Ae;if(s===void 0)return this.delete(e),this;const{ttl:n=this.ttl,start:i,noDisposeOnSet:l=this.noDisposeOnSet,sizeCalculation:T=this.sizeCalculation,status:w}=o;let{noUpdateTTL:$=this.noUpdateTTL}=o;const Y=r(this,Er).call(this,e,s,o.size||0,T);if(this.maxEntrySize&&Y>this.maxEntrySize)return w&&(w.set="miss",w.maxEntrySizeExceeded=!0),this.delete(e),this;let C=r(this,Q)===0?void 0:r(this,ee).get(e);if(C===void 0)C=r(this,Q)===0?r(this,te):r(this,De).length!==0?r(this,De).pop():r(this,Q)===r(this,Re)?b(this,gr,vr).call(this,!1):r(this,Q),r(this,H)[C]=e,r(this,S)[C]=s,r(this,ee).set(e,C),r(this,ge)[r(this,te)]=C,r(this,ke)[C]=r(this,te),y(this,te,C),Sr(this,Q)._++,r(this,dr).call(this,C,Y,w),w&&(w.set="add"),$=!1;else{b(this,ar,_r).call(this,C);const U=r(this,S)[C];if(s!==U){if(r(this,Xe)&&b(this,z,N).call(this,U)?U.__abortController.abort(new Error("replaced")):l||(r(this,We)&&((ie=r(this,ze))==null||ie.call(this,U,e,"set")),r(this,Ee)&&((he=r(this,ne))==null||he.push([U,e,"set"]))),r(this,ir).call(this,C),r(this,dr).call(this,C,Y,w),r(this,S)[C]=s,w){w.set="replace";const J=U&&b(this,z,N).call(this,U)?U.__staleWhileFetching:U;J!==void 0&&(w.oldValue=J)}}else w&&(w.set="update")}if(n!==0&&!r(this,Ce)&&b(this,mr,Ur).call(this),r(this,Ce)&&($||r(this,Tr).call(this,C,n,i),w&&r(this,Ke).call(this,w,C)),!l&&r(this,Ee)&&r(this,ne)){const U=r(this,ne);let J;for(;J=U==null?void 0:U.shift();)(Ae=r(this,Fe))==null||Ae.call(this,...J)}return this}pop(){var e;try{for(;r(this,Q);){const s=r(this,S)[r(this,pe)];if(b(this,gr,vr).call(this,!0),b(this,z,N).call(this,s)){if(s.__staleWhileFetching)return s.__staleWhileFetching}else if(s!==void 0)return s}}finally{if(r(this,Ee)&&r(this,ne)){const s=r(this,ne);let o;for(;o=s==null?void 0:s.shift();)(e=r(this,Fe))==null||e.call(this,...o)}}}has(e,s={}){const{updateAgeOnHas:o=this.updateAgeOnHas,status:n}=s,i=r(this,ee).get(e);if(i!==void 0){const l=r(this,S)[i];if(b(this,z,N).call(this,l)&&l.__staleWhileFetching===void 0)return!1;if(r(this,ye).call(this,i))n&&(n.has="stale",r(this,Ke).call(this,n,i));else return o&&r(this,nr).call(this,i),n&&(n.has="hit",r(this,Ke).call(this,n,i)),!0}else n&&(n.has="miss");return!1}peek(e,s={}){const{allowStale:o=this.allowStale}=s,n=r(this,ee).get(e);if(n!==void 0&&(o||!r(this,ye).call(this,n))){const i=r(this,S)[n];return b(this,z,N).call(this,i)?i.__staleWhileFetching:i}}async fetch(e,s={}){const{allowStale:o=this.allowStale,updateAgeOnGet:n=this.updateAgeOnGet,noDeleteOnStaleGet:i=this.noDeleteOnStaleGet,ttl:l=this.ttl,noDisposeOnSet:T=this.noDisposeOnSet,size:w=0,sizeCalculation:$=this.sizeCalculation,noUpdateTTL:Y=this.noUpdateTTL,noDeleteOnFetchRejection:C=this.noDeleteOnFetchRejection,allowStaleOnFetchRejection:ie=this.allowStaleOnFetchRejection,ignoreFetchAbort:he=this.ignoreFetchAbort,allowStaleOnFetchAbort:Ae=this.allowStaleOnFetchAbort,context:U,forceRefresh:J=!1,status:I,signal:X}=s;if(!r(this,Xe))return I&&(I.fetch="get"),this.get(e,{allowStale:o,updateAgeOnGet:n,noDeleteOnStaleGet:i,status:I});const ae={allowStale:o,updateAgeOnGet:n,noDeleteOnStaleGet:i,ttl:l,noDisposeOnSet:T,size:w,sizeCalculation:$,noUpdateTTL:Y,noDeleteOnFetchRejection:C,allowStaleOnFetchRejection:ie,allowStaleOnFetchAbort:Ae,ignoreFetchAbort:he,status:I,signal:X};let Z=r(this,ee).get(e);if(Z===void 0){I&&(I.fetch="miss");const ue=b(this,hr,Pr).call(this,e,Z,ae,U);return ue.__returned=ue}else{const ue=r(this,S)[Z];if(b(this,z,N).call(this,ue)){const Ar=o&&ue.__staleWhileFetching!==void 0;return I&&(I.fetch="inflight",Ar&&(I.returnedStale=!0)),Ar?ue.__staleWhileFetching:ue.__returned=ue}const Je=r(this,ye).call(this,Z);if(!J&&!Je)return I&&(I.fetch="hit"),b(this,ar,_r).call(this,Z),n&&r(this,nr).call(this,Z),I&&r(this,Ke).call(this,I,Z),ue;const xe=b(this,hr,Pr).call(this,e,Z,ae,U),yr=xe.__staleWhileFetching!==void 0&&o;return I&&(I.fetch=Je?"stale":"refresh",yr&&Je&&(I.returnedStale=!0)),yr?xe.__staleWhileFetching:xe.__returned=xe}}get(e,s={}){const{allowStale:o=this.allowStale,updateAgeOnGet:n=this.updateAgeOnGet,noDeleteOnStaleGet:i=this.noDeleteOnStaleGet,status:l}=s,T=r(this,ee).get(e);if(T!==void 0){const w=r(this,S)[T],$=b(this,z,N).call(this,w);return l&&r(this,Ke).call(this,l,T),r(this,ye).call(this,T)?(l&&(l.get="stale"),$?(l&&o&&w.__staleWhileFetching!==void 0&&(l.returnedStale=!0),o?w.__staleWhileFetching:void 0):(i||this.delete(e),l&&o&&(l.returnedStale=!0),o?w:void 0)):(l&&(l.get="hit"),$?w.__staleWhileFetching:(b(this,ar,_r).call(this,T),n&&r(this,nr).call(this,T),w))}else l&&(l.get="miss")}delete(e){var o,n,i,l;let s=!1;if(r(this,Q)!==0){const T=r(this,ee).get(e);if(T!==void 0)if(s=!0,r(this,Q)===1)this.clear();else{r(this,ir).call(this,T);const w=r(this,S)[T];b(this,z,N).call(this,w)?w.__abortController.abort(new Error("deleted")):(r(this,We)||r(this,Ee))&&(r(this,We)&&((o=r(this,ze))==null||o.call(this,w,e,"delete")),r(this,Ee)&&((n=r(this,ne))==null||n.push([w,e,"delete"]))),r(this,ee).delete(e),r(this,H)[T]=void 0,r(this,S)[T]=void 0,T===r(this,te)?y(this,te,r(this,ke)[T]):T===r(this,pe)?y(this,pe,r(this,ge)[T]):(r(this,ge)[r(this,ke)[T]]=r(this,ge)[T],r(this,ke)[r(this,ge)[T]]=r(this,ke)[T]),Sr(this,Q)._--,r(this,De).push(T)}}if(r(this,Ee)&&((i=r(this,ne))!=null&&i.length)){const T=r(this,ne);let w;for(;w=T==null?void 0:T.shift();)(l=r(this,Fe))==null||l.call(this,...w)}return s}clear(){var e,s,o;for(const n of b(this,He,Qe).call(this,{allowStale:!0})){const i=r(this,S)[n];if(b(this,z,N).call(this,i))i.__abortController.abort(new Error("deleted"));else{const l=r(this,H)[n];r(this,We)&&((e=r(this,ze))==null||e.call(this,i,l,"delete")),r(this,Ee)&&((s=r(this,ne))==null||s.push([i,l,"delete"]))}}if(r(this,ee).clear(),r(this,S).fill(void 0),r(this,H).fill(void 0),r(this,Ce)&&r(this,Me)&&(r(this,Ce).fill(0),r(this,Me).fill(0)),r(this,Ve)&&r(this,Ve).fill(0),y(this,pe,0),y(this,te,0),r(this,De).length=0,y(this,Ue,0),y(this,Q,0),r(this,Ee)&&r(this,ne)){const n=r(this,ne);let i;for(;i=n==null?void 0:n.shift();)(o=r(this,Fe))==null||o.call(this,...i)}}};let E=Or;Re=new WeakMap,Ge=new WeakMap,ze=new WeakMap,Fe=new WeakMap,ur=new WeakMap,Q=new WeakMap,Ue=new WeakMap,ee=new WeakMap,H=new WeakMap,S=new WeakMap,ge=new WeakMap,ke=new WeakMap,pe=new WeakMap,te=new WeakMap,De=new WeakMap,ne=new WeakMap,Ve=new WeakMap,Me=new WeakMap,Ce=new WeakMap,We=new WeakMap,Xe=new WeakMap,Ee=new WeakMap,mr=new WeakSet,Ur=function(){const e=new h(r(this,Re)),s=new h(r(this,Re));y(this,Ce,e),y(this,Me,s),y(this,Tr,(i,l,T=de.now())=>{if(s[i]=l!==0?T:0,e[i]=l,l!==0&&this.ttlAutopurge){const w=setTimeout(()=>{r(this,ye).call(this,i)&&this.delete(r(this,H)[i])},l+1);w.unref&&w.unref()}}),y(this,nr,i=>{s[i]=e[i]!==0?de.now():0}),y(this,Ke,(i,l)=>{if(e[l]){const T=e[l],w=s[l];i.ttl=T,i.start=w,i.now=o||n();const $=i.now-w;i.remainingTTL=T-$}});let o=0;const n=()=>{const i=de.now();if(this.ttlResolution>0){o=i;const l=setTimeout(()=>o=0,this.ttlResolution);l.unref&&l.unref()}return i};this.getRemainingTTL=i=>{const l=r(this,ee).get(i);if(l===void 0)return 0;const T=e[l],w=s[l];if(T===0||w===0)return 1/0;const $=(o||n())-w;return T-$},y(this,ye,i=>e[i]!==0&&s[i]!==0&&(o||n())-s[i]>e[i])},nr=new WeakMap,Ke=new WeakMap,Tr=new WeakMap,ye=new WeakMap,kr=new WeakSet,qr=function(){const e=new h(r(this,Re));y(this,Ue,0),y(this,Ve,e),y(this,ir,s=>{y(this,Ue,r(this,Ue)-e[s]),e[s]=0}),y(this,Er,(s,o,n,i)=>{if(b(this,z,N).call(this,o))return 0;if(!be(n))if(i){if(typeof i!="function")throw new TypeError("sizeCalculation must be a function");if(n=i(o,s),!be(n))throw new TypeError("sizeCalculation return invalid (expect positive integer)")}else throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");return n}),y(this,dr,(s,o,n)=>{if(e[s]=o,r(this,Ge)){const i=r(this,Ge)-e[s];for(;r(this,Ue)>i;)b(this,gr,vr).call(this,!0)}y(this,Ue,r(this,Ue)+e[s]),n&&(n.entrySize=o,n.totalCalculatedSize=r(this,Ue))})},ir=new WeakMap,dr=new WeakMap,Er=new WeakMap,Be=new WeakSet,Ze=function*({allowStale:e=this.allowStale}={}){if(r(this,Q))for(let s=r(this,te);!(!b(this,fr,Dr).call(this,s)||((e||!r(this,ye).call(this,s))&&(yield s),s===r(this,pe)));)s=r(this,ke)[s]},He=new WeakSet,Qe=function*({allowStale:e=this.allowStale}={}){if(r(this,Q))for(let s=r(this,pe);!(!b(this,fr,Dr).call(this,s)||((e||!r(this,ye).call(this,s))&&(yield s),s===r(this,te)));)s=r(this,ge)[s]},fr=new WeakSet,Dr=function(e){return e!==void 0&&r(this,ee).get(r(this,H)[e])===e},gr=new WeakSet,vr=function(e){var i,l;const s=r(this,pe),o=r(this,H)[s],n=r(this,S)[s];return r(this,Xe)&&b(this,z,N).call(this,n)?n.__abortController.abort(new Error("evicted")):(r(this,We)||r(this,Ee))&&(r(this,We)&&((i=r(this,ze))==null||i.call(this,n,o,"evict")),r(this,Ee)&&((l=r(this,ne))==null||l.push([n,o,"evict"]))),r(this,ir).call(this,s),e&&(r(this,H)[s]=void 0,r(this,S)[s]=void 0,r(this,De).push(s)),r(this,Q)===1?(y(this,pe,y(this,te,0)),r(this,De).length=0):y(this,pe,r(this,ge)[s]),r(this,ee).delete(o),Sr(this,Q)._--,s},hr=new WeakSet,Pr=function(e,s,o,n){const i=s===void 0?void 0:r(this,S)[s];if(b(this,z,N).call(this,i))return i;const l=new je,{signal:T}=o;T==null||T.addEventListener("abort",()=>l.abort(T.reason),{signal:l.signal});const w={signal:l.signal,options:o,context:n},$=(U,J=!1)=>{const{aborted:I}=l.signal,X=o.ignoreFetchAbort&&U!==void 0;if(o.status&&(I&&!J?(o.status.fetchAborted=!0,o.status.fetchError=l.signal.reason,X&&(o.status.fetchAbortIgnored=!0)):o.status.fetchResolved=!0),I&&!X&&!J)return C(l.signal.reason);const ae=he;return r(this,S)[s]===he&&(U===void 0?ae.__staleWhileFetching?r(this,S)[s]=ae.__staleWhileFetching:this.delete(e):(o.status&&(o.status.fetchUpdated=!0),this.set(e,U,w.options))),U},Y=U=>(o.status&&(o.status.fetchRejected=!0,o.status.fetchError=U),C(U)),C=U=>{const{aborted:J}=l.signal,I=J&&o.allowStaleOnFetchAbort,X=I||o.allowStaleOnFetchRejection,ae=X||o.noDeleteOnFetchRejection,Z=he;if(r(this,S)[s]===he&&(!ae||Z.__staleWhileFetching===void 0?this.delete(e):I||(r(this,S)[s]=Z.__staleWhileFetching)),X)return o.status&&Z.__staleWhileFetching!==void 0&&(o.status.returnedStale=!0),Z.__staleWhileFetching;if(Z.__returned===Z)throw U},ie=(U,J)=>{var X;const I=(X=r(this,ur))==null?void 0:X.call(this,e,i,w);I&&I instanceof Promise&&I.then(ae=>U(ae),J),l.signal.addEventListener("abort",()=>{(!o.ignoreFetchAbort||o.allowStaleOnFetchAbort)&&(U(),o.allowStaleOnFetchAbort&&(U=ae=>$(ae,!0)))})};o.status&&(o.status.fetchDispatched=!0);const he=new Promise(ie).then($,Y),Ae=Object.assign(he,{__abortController:l,__staleWhileFetching:i,__returned:void 0});return s===void 0?(this.set(e,Ae,{...w.options,status:void 0}),s=r(this,ee).get(e)):r(this,S)[s]=Ae,Ae},z=new WeakSet,N=function(e){if(!r(this,Xe))return!1;const s=e;return!!s&&s instanceof Promise&&s.hasOwnProperty("__staleWhileFetching")&&s.__abortController instanceof je},wr=new WeakSet,Cr=function(e,s){r(this,ke)[s]=e,r(this,ge)[e]=s},ar=new WeakSet,_r=function(e){e!==r(this,te)&&(e===r(this,pe)?y(this,pe,r(this,ge)[e]):b(this,wr,Cr).call(this,r(this,ke)[e],r(this,ge)[e]),b(this,wr,Cr).call(this,r(this,te),e),y(this,te,e))};async function m({appId:t,privateKey:e,timeDifference:s}){try{const o=await(0,O.C)({id:+t,privateKey:e,now:s&&Math.floor(Date.now()/1e3)+s});return{type:"app",token:o.token,appId:o.appId,expiresAt:new Date(o.expiration*1e3).toISOString()}}catch(o){throw e==="-----BEGIN RSA PRIVATE KEY-----"?new Error("The 'privateKey` option contains only the first line '-----BEGIN RSA PRIVATE KEY-----'. If you are setting it using a `.env` file, make sure it is set on a single line with newlines replaced by '\n'"):o}}function a(){return new E({max:15e3,ttl:1e3*60*59})}async function p(t,e){const s=f(e),o=await t.get(s);if(!o)return;const[n,i,l,T,w,$]=o.split("|"),Y=e.permissions||w.split(/,/).reduce((C,ie)=>(/!$/.test(ie)?C[ie.slice(0,-1)]="write":C[ie]="read",C),{});return{token:n,createdAt:i,expiresAt:l,permissions:Y,repositoryIds:e.repositoryIds,repositoryNames:e.repositoryNames,singleFileName:$,repositorySelection:T}}async function d(t,e,s){const o=f(e),n=e.permissions?"":Object.keys(s.permissions).map(l=>`${l}${s.permissions[l]==="write"?"!":""}`).join(","),i=[s.token,s.createdAt,s.expiresAt,s.repositorySelection,n,s.singleFileName].join("|");await t.set(o,i)}function f({installationId:t,permissions:e={},repositoryIds:s=[],repositoryNames:o=[]}){const n=Object.keys(e).sort().map(T=>e[T]==="read"?T:`${T}!`).join(","),i=s.sort().join(","),l=o.join(",");return[t,i,l,n].filter(Boolean).join("|")}function k({installationId:t,token:e,createdAt:s,expiresAt:o,repositorySelection:n,permissions:i,repositoryIds:l,repositoryNames:T,singleFileName:w}){return Object.assign({type:"token",tokenType:"installation",token:e,installationId:t,permissions:i,createdAt:s,expiresAt:o,repositorySelection:n},l?{repositoryIds:l}:null,T?{repositoryNames:T}:null,w?{singleFileName:w}:null)}async function P(t,e,s){const o=Number(e.installationId||t.installationId);if(!o)throw new Error("[@octokit/auth-app] installationId option is required for installation authentication.");if(e.factory){const{type:X,factory:ae,oauthApp:Z,...ue}={...t,...e};return ae(ue)}const n=Object.assign({installationId:o},e);if(!e.refresh){const X=await p(t.cache,n);if(X){const{token:ae,createdAt:Z,expiresAt:ue,permissions:Je,repositoryIds:xe,repositoryNames:Rr,singleFileName:yr,repositorySelection:Ar}=X;return k({installationId:o,token:ae,createdAt:Z,expiresAt:ue,permissions:Je,repositorySelection:Ar,repositoryIds:xe,repositoryNames:Rr,singleFileName:yr})}}const i=await m(t),l=s||t.request,{data:{token:T,expires_at:w,repositories:$,permissions:Y,repository_selection:C,single_file:ie}}=await l("POST /app/installations/{installation_id}/access_tokens",{installation_id:o,repository_ids:e.repositoryIds,repositories:e.repositoryNames,permissions:e.permissions,mediaType:{previews:["machine-man"]},headers:{authorization:`bearer ${i.token}`}}),he=Y||{},Ae=C||"all",U=$?$.map(X=>X.id):void 0,J=$?$.map(X=>X.name):void 0,I=new Date().toISOString();return await d(t.cache,n,{token:T,createdAt:I,expiresAt:w,repositorySelection:Ae,permissions:he,repositoryIds:U,repositoryNames:J,singleFileName:ie}),k({installationId:o,token:T,createdAt:I,expiresAt:w,repositorySelection:Ae,permissions:he,repositoryIds:U,repositoryNames:J,singleFileName:ie})}async function R(t,e){switch(e.type){case"app":return m(t);case"oauth":t.log.warn(new G.$('[@octokit/auth-app] {type: "oauth"} is deprecated. Use {type: "oauth-app"} instead'));case"oauth-app":return t.oauthApp({type:"oauth-app"});case"installation":return P(t,{...e,type:"installation"});case"oauth-user":return t.oauthApp(e);default:throw new Error(`Invalid auth type: ${e.type}`)}}var M=["/app","/app/hook/config","/app/hook/deliveries","/app/hook/deliveries/{delivery_id}","/app/hook/deliveries/{delivery_id}/attempts","/app/installations","/app/installations/{installation_id}","/app/installations/{installation_id}/access_tokens","/app/installations/{installation_id}/suspended","/marketplace_listing/accounts/{account_id}","/marketplace_listing/plan","/marketplace_listing/plans","/marketplace_listing/plans/{plan_id}/accounts","/marketplace_listing/stubbed/accounts/{account_id}","/marketplace_listing/stubbed/plan","/marketplace_listing/stubbed/plans","/marketplace_listing/stubbed/plans/{plan_id}/accounts","/orgs/{org}/installation","/repos/{owner}/{repo}/installation","/users/{username}/installation"];function ce(t){const s=`^(?:${t.map(o=>o.split("/").map(n=>n.startsWith("{")?"(?:.+?)":n).join("/")).map(o=>`(?:${o})`).join("|")})$`;return new RegExp(s,"i")}var le=ce(M);function $e(t){return!!t&&le.test(t.split("?")[0])}var or=5*1e3;function br(t){return!(t.message.match(/'Expiration time' claim \('exp'\) must be a numeric value representing the future time at which the assertion expires/)||t.message.match(/'Issued at' claim \('iat'\) must be an Integer representing the time that the assertion was issued/))}async function Gr(t,e,s,o){const n=e.endpoint.merge(s,o),i=n.url;if(/\/login\/oauth\/access_token$/.test(i))return e(n);if($e(i.replace(e.endpoint.DEFAULTS.baseUrl,""))){const{token:w}=await m(t);n.headers.authorization=`bearer ${w}`;let $;try{$=await e(n)}catch(Y){if(br(Y)||typeof Y.response.headers.date=="undefined")throw Y;const C=Math.floor((Date.parse(Y.response.headers.date)-Date.parse(new Date().toString()))/1e3);t.log.warn(Y.message),t.log.warn(`[@octokit/auth-app] GitHub API time and system time are different by ${C} seconds. Retrying request with the difference accounted for.`);const{token:ie}=await m({...t,timeDifference:C});return n.headers.authorization=`bearer ${ie}`,e(n)}return $}if(Ie(i)){const w=await t.oauthApp({type:"oauth-app"});return n.headers.authorization=w.headers.authorization,e(n)}const{token:l,createdAt:T}=await P(t,{},e);return n.headers.authorization=`token ${l}`,Ir(t,e,n,T)}async function Ir(t,e,s,o,n=0){const i=+new Date-+new Date(o);try{return await e(s)}catch(l){if(l.status!==401)throw l;if(i>=or)throw n>0&&(l.message=`After ${n} retries within ${i/1e3}s of creating the installation access token, the response remains 401. At this point, the cause may be an authentication problem or a system outage. Please check https://www.githubstatus.com for status information`),l;++n;const T=n*1e3;return t.log.warn(`[@octokit/auth-app] Retrying after 401 response to account for token replication delay (retry: ${n}, wait: ${T/1e3}s)`),await new Promise(w=>setTimeout(w,T)),Ir(t,e,s,o,n)}}var jr="4.0.13";function $r(t){if(!t.appId)throw new Error("[@octokit/auth-app] appId option is required");if(!Number.isFinite(+t.appId))throw new Error("[@octokit/auth-app] appId option must be a number or numeric string");if(!t.privateKey)throw new Error("[@octokit/auth-app] privateKey option is required");if("installationId"in t&&!t.installationId)throw new Error("[@octokit/auth-app] installationId is set to a falsy value");const e=Object.assign({warn:console.warn.bind(console)},t.log),s=t.request||oe.request.defaults({headers:{"user-agent":`octokit-auth-app.js/${jr} ${(0,W.i)()}`}}),o=Object.assign({request:s,cache:a()},t,t.installationId?{installationId:Number(t.installationId)}:{},{log:e,oauthApp:F({clientType:"github-app",clientId:t.clientId||"",clientSecret:t.clientSecret||"",request:s})});return Object.assign(R.bind(null,o),{hook:Gr.bind(null,o)})}},42469:function(L,A,_){_.r(A),_.d(A,{oauthAuthorizationUrl:function(){return W}});function W(x){const q=x.clientType||"oauth-app",V=x.baseUrl||"https://github.com",B={clientType:q,allowSignup:x.allowSignup!==!1,clientId:x.clientId,login:x.login||null,redirectUrl:x.redirectUrl||null,state:x.state||Math.random().toString(36).substr(2),url:""};if(q==="oauth-app"){const j="scopes"in x?x.scopes:[];B.scopes=typeof j=="string"?j.split(/[,\s]+/).filter(Boolean):j}return B.url=oe(`${V}/login/oauth/authorize`,B),B}function oe(x,q){const V={allowSignup:"allow_signup",clientId:"client_id",login:"login",redirectUrl:"redirect_uri",scopes:"scope",state:"state"};let B=x;return Object.keys(V).filter(j=>q[j]!==null).filter(j=>j!=="scopes"?!0:q.clientType==="github-app"?!1:!Array.isArray(q[j])||q[j].length>0).map(j=>[V[j],`${q[j]}`]).forEach(([j,fe],re)=>{B+=re===0?"?":"&",B+=`${j}=${encodeURIComponent(fe)}`}),B}},78084:function(L,A,_){var W;W={value:!0};function oe(u){return u&&typeof u=="object"&&"default"in u?u.default:u}var x=_(42469),q=_(31765),V=_(29717),B=oe(_(23531));const j="2.0.5";function fe(u){const F=u.endpoint.DEFAULTS;return/^https:\/\/(api\.)?github\.com$/.test(F.baseUrl)?"https://github.com":F.baseUrl.replace("/api/v3","")}async function re(u,F,G){const O={baseUrl:fe(u),headers:{accept:"application/json"},...G},D=await u(F,O);if("error"in D.data){const de=new V.RequestError(`${D.data.error_description} (${D.data.error}, ${D.data.error_uri})`,400,{request:u.endpoint.merge(F,O),headers:D.headers});throw de.response=D,de}return D}function se({request:u=q.request,...F}){const G=fe(u);return x.oauthAuthorizationUrl({...F,baseUrl:G})}async function me(u){const F=u.request||q.request,G=await re(F,"POST /login/oauth/access_token",{client_id:u.clientId,client_secret:u.clientSecret,code:u.code,redirect_uri:u.redirectUrl}),O={clientType:u.clientType,clientId:u.clientId,clientSecret:u.clientSecret,token:G.data.access_token,scopes:G.data.scope.split(/\s+/).filter(Boolean)};if(u.clientType==="github-app"){if("refresh_token"in G.data){const D=new Date(G.headers.date).getTime();O.refreshToken=G.data.refresh_token,O.expiresAt=we(D,G.data.expires_in),O.refreshTokenExpiresAt=we(D,G.data.refresh_token_expires_in)}delete O.scopes}return{...G,authentication:O}}function we(u,F){return new Date(u+F*1e3).toISOString()}async function Se(u){const F=u.request||q.request,G={client_id:u.clientId};return"scopes"in u&&Array.isArray(u.scopes)&&(G.scope=u.scopes.join(" ")),re(F,"POST /login/device/code",G)}async function ve(u){const F=u.request||q.request,G=await re(F,"POST /login/oauth/access_token",{client_id:u.clientId,device_code:u.code,grant_type:"urn:ietf:params:oauth:grant-type:device_code"}),O={clientType:u.clientType,clientId:u.clientId,token:G.data.access_token,scopes:G.data.scope.split(/\s+/).filter(Boolean)};if("clientSecret"in u&&(O.clientSecret=u.clientSecret),u.clientType==="github-app"){if("refresh_token"in G.data){const D=new Date(G.headers.date).getTime();O.refreshToken=G.data.refresh_token,O.expiresAt=Te(D,G.data.expires_in),O.refreshTokenExpiresAt=Te(D,G.data.refresh_token_expires_in)}delete O.scopes}return{...G,authentication:O}}function Te(u,F){return new Date(u+F*1e3).toISOString()}async function Pe(u){const G=await(u.request||q.request)("POST /applications/{client_id}/token",{headers:{authorization:`basic ${B(`${u.clientId}:${u.clientSecret}`)}`},client_id:u.clientId,access_token:u.token}),O={clientType:u.clientType,clientId:u.clientId,clientSecret:u.clientSecret,token:u.token,scopes:G.data.scopes};return G.data.expires_at&&(O.expiresAt=G.data.expires_at),u.clientType==="github-app"&&delete O.scopes,{...G,authentication:O}}async function er(u){const F=u.request||q.request,G=await re(F,"POST /login/oauth/access_token",{client_id:u.clientId,client_secret:u.clientSecret,grant_type:"refresh_token",refresh_token:u.refreshToken}),O=new Date(G.headers.date).getTime(),D={clientType:"github-app",clientId:u.clientId,clientSecret:u.clientSecret,token:G.data.access_token,refreshToken:G.data.refresh_token,expiresAt:Ie(O,G.data.expires_in),refreshTokenExpiresAt:Ie(O,G.data.refresh_token_expires_in)};return{...G,authentication:D}}function Ie(u,F){return new Date(u+F*1e3).toISOString()}async function rr(u){const{request:F,clientType:G,clientId:O,clientSecret:D,token:de,..._e}=u,Oe=await(F||q.request)("POST /applications/{client_id}/token/scoped",{headers:{authorization:`basic ${B(`${O}:${D}`)}`},client_id:O,access_token:de,..._e}),je=Object.assign({clientType:G,clientId:O,clientSecret:D,token:Oe.data.token},Oe.data.expires_at?{expiresAt:Oe.data.expires_at}:{});return{...Oe,authentication:je}}async function Le(u){const F=u.request||q.request,G=B(`${u.clientId}:${u.clientSecret}`),O=await F("PATCH /applications/{client_id}/token",{headers:{authorization:`basic ${G}`},client_id:u.clientId,access_token:u.token}),D={clientType:u.clientType,clientId:u.clientId,clientSecret:u.clientSecret,token:O.data.token,scopes:O.data.scopes};return O.data.expires_at&&(D.expiresAt=O.data.expires_at),u.clientType==="github-app"&&delete D.scopes,{...O,authentication:D}}async function Ye(u){const F=u.request||q.request,G=B(`${u.clientId}:${u.clientSecret}`);return F("DELETE /applications/{client_id}/token",{headers:{authorization:`basic ${G}`},client_id:u.clientId,access_token:u.token})}async function qe(u){const F=u.request||q.request,G=B(`${u.clientId}:${u.clientSecret}`);return F("DELETE /applications/{client_id}/grant",{headers:{authorization:`basic ${G}`},client_id:u.clientId,access_token:u.token})}W=j,A.a_=Pe,A.TG=Se,A.sA=qe,A.pQ=Ye,A.i7=ve,A.yi=me,W=se,A.g$=er,A.Eu=Le,W=rr},29717:function(L,A,_){_.r(A),_.d(A,{RequestError:function(){return B}});var W=_(91346),oe=_(29928),x=_.n(oe);const q=x()(j=>console.warn(j)),V=x()(j=>console.warn(j));class B extends Error{constructor(fe,re,se){super(fe),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="HttpError",this.status=re;let me;"headers"in se&&typeof se.headers!="undefined"&&(me=se.headers),"response"in se&&(this.response=se.response,me=se.response.headers);const we=Object.assign({},se.request);se.request.headers.authorization&&(we.headers=Object.assign({},se.request.headers,{authorization:se.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),we.url=we.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=we,Object.defineProperty(this,"code",{get(){return q(new W.$("[@octokit/request-error] `error.code` is deprecated, use `error.status`.")),re}}),Object.defineProperty(this,"headers",{get(){return V(new W.$("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.")),me||{}}})}}},31765:function(L,A,_){_.r(A),_.d(A,{request:function(){return be}});var W=_(66439),oe=_(7502);function x(c){return c?Object.keys(c).reduce((h,g)=>(h[g.toLowerCase()]=c[g],h),{}):{}}function q(c,h){const g=Object.assign({},c);return Object.keys(h).forEach(E=>{(0,W.P)(h[E])?E in c?g[E]=q(c[E],h[E]):Object.assign(g,{[E]:h[E]}):Object.assign(g,{[E]:h[E]})}),g}function V(c){for(const h in c)c[h]===void 0&&delete c[h];return c}function B(c,h,g){if(typeof h=="string"){let[m,a]=h.split(" ");g=Object.assign(a?{method:m,url:a}:{url:m},g)}else g=Object.assign({},h);g.headers=x(g.headers),V(g),V(g.headers);const E=q(c||{},g);return c&&c.mediaType.previews.length&&(E.mediaType.previews=c.mediaType.previews.filter(m=>!E.mediaType.previews.includes(m)).concat(E.mediaType.previews)),E.mediaType.previews=E.mediaType.previews.map(m=>m.replace(/-preview/,"")),E}function j(c,h){const g=/\?/.test(c)?"&":"?",E=Object.keys(h);return E.length===0?c:c+g+E.map(m=>m==="q"?"q="+h.q.split("+").map(encodeURIComponent).join("+"):`${m}=${encodeURIComponent(h[m])}`).join("&")}const fe=/\{[^}]+\}/g;function re(c){return c.replace(/^\W+|\W+$/g,"").split(/,/)}function se(c){const h=c.match(fe);return h?h.map(re).reduce((g,E)=>g.concat(E),[]):[]}function me(c,h){return Object.keys(c).filter(g=>!h.includes(g)).reduce((g,E)=>(g[E]=c[E],g),{})}function we(c){return c.split(/(%[0-9A-Fa-f]{2})/g).map(function(h){return/%[0-9A-Fa-f]/.test(h)||(h=encodeURI(h).replace(/%5B/g,"[").replace(/%5D/g,"]")),h}).join("")}function Se(c){return encodeURIComponent(c).replace(/[!'()*]/g,function(h){return"%"+h.charCodeAt(0).toString(16).toUpperCase()})}function ve(c,h,g){return h=c==="+"||c==="#"?we(h):Se(h),g?Se(g)+"="+h:h}function Te(c){return c!=null}function Pe(c){return c===";"||c==="&"||c==="?"}function er(c,h,g,E){var m=c[g],a=[];if(Te(m)&&m!=="")if(typeof m=="string"||typeof m=="number"||typeof m=="boolean")m=m.toString(),E&&E!=="*"&&(m=m.substring(0,parseInt(E,10))),a.push(ve(h,m,Pe(h)?g:""));else if(E==="*")Array.isArray(m)?m.filter(Te).forEach(function(p){a.push(ve(h,p,Pe(h)?g:""))}):Object.keys(m).forEach(function(p){Te(m[p])&&a.push(ve(h,m[p],p))});else{const p=[];Array.isArray(m)?m.filter(Te).forEach(function(d){p.push(ve(h,d))}):Object.keys(m).forEach(function(d){Te(m[d])&&(p.push(Se(d)),p.push(ve(h,m[d].toString())))}),Pe(h)?a.push(Se(g)+"="+p.join(",")):p.length!==0&&a.push(p.join(","))}else h===";"?Te(m)&&a.push(Se(g)):m===""&&(h==="&"||h==="?")?a.push(Se(g)+"="):m===""&&a.push("");return a}function Ie(c){return{expand:rr.bind(null,c)}}function rr(c,h){var g=["+","#",".","/",";","?","&"];return c.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(E,m,a){if(m){let d="";const f=[];if(g.indexOf(m.charAt(0))!==-1&&(d=m.charAt(0),m=m.substr(1)),m.split(/,/g).forEach(function(k){var P=/([^:\*]*)(?::(\d+)|(\*))?/.exec(k);f.push(er(h,d,P[1],P[2]||P[3]))}),d&&d!=="+"){var p=",";return d==="?"?p="&":d!=="#"&&(p=d),(f.length!==0?d:"")+f.join(p)}else return f.join(",")}else return we(a)})}function Le(c){let h=c.method.toUpperCase(),g=(c.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),E=Object.assign({},c.headers),m,a=me(c,["method","baseUrl","url","headers","request","mediaType"]);const p=se(g);g=Ie(g).expand(a),/^http/.test(g)||(g=c.baseUrl+g);const d=Object.keys(c).filter(P=>p.includes(P)).concat("baseUrl"),f=me(a,d);if(!/application\/octet-stream/i.test(E.accept)&&(c.mediaType.format&&(E.accept=E.accept.split(/,/).map(P=>P.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${c.mediaType.format}`)).join(",")),c.mediaType.previews.length)){const P=E.accept.match(/[\w-]+(?=-preview)/g)||[];E.accept=P.concat(c.mediaType.previews).map(R=>{const M=c.mediaType.format?`.${c.mediaType.format}`:"+json";return`application/vnd.github.${R}-preview${M}`}).join(",")}return["GET","HEAD"].includes(h)?g=j(g,f):"data"in f?m=f.data:Object.keys(f).length&&(m=f),!E["content-type"]&&typeof m!="undefined"&&(E["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(h)&&typeof m=="undefined"&&(m=""),Object.assign({method:h,url:g,headers:E},typeof m!="undefined"?{body:m}:null,c.request?{request:c.request}:null)}function Ye(c,h,g){return Le(B(c,h,g))}function qe(c,h){const g=B(c,h),E=Ye.bind(null,g);return Object.assign(E,{DEFAULTS:g,defaults:qe.bind(null,g),merge:B.bind(null,g),parse:Le})}const G={method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":`octokit-endpoint.js/7.0.5 ${(0,oe.i)()}`},mediaType:{format:"",previews:[]}},O=qe(null,G);var D=_(34911),de=_.n(D),_e=_(29717),sr="6.2.5";function Oe(c){return c.arrayBuffer()}function je(c){const h=c.request&&c.request.log?c.request.log:console;((0,W.P)(c.body)||Array.isArray(c.body))&&(c.body=JSON.stringify(c.body));let g={},E,m;return(c.request&&c.request.fetch||globalThis.fetch||de())(c.url,Object.assign({method:c.method,body:c.body,headers:c.headers,redirect:c.redirect,...c.body&&{duplex:"half"}},c.request)).then(async p=>{m=p.url,E=p.status;for(const d of p.headers)g[d[0]]=d[1];if("deprecation"in g){const d=g.link&&g.link.match(/<([^>]+)>; rel="deprecation"/),f=d&&d.pop();h.warn(`[@octokit/request] "${c.method} ${c.url}" is deprecated. It is scheduled to be removed on ${g.sunset}${f?`. See ${f}`:""}`)}if(!(E===204||E===205)){if(c.method==="HEAD"){if(E<400)return;throw new _e.RequestError(p.statusText,E,{response:{url:m,status:E,headers:g,data:void 0},request:c})}if(E===304)throw new _e.RequestError("Not modified",E,{response:{url:m,status:E,headers:g,data:await Ne(p)},request:c});if(E>=400){const d=await Ne(p);throw new _e.RequestError(cr(d),E,{response:{url:m,status:E,headers:g,data:d},request:c})}return Ne(p)}}).then(p=>({status:E,url:m,headers:g,data:p})).catch(p=>{throw p instanceof _e.RequestError||p.name==="AbortError"?p:new _e.RequestError(p.message,500,{request:c})})}async function Ne(c){const h=c.headers.get("content-type");return/application\/json/.test(h)?c.json():!h||/^text\/|charset=utf-8$/.test(h)?c.text():Oe(c)}function cr(c){return typeof c=="string"?c:"message"in c?Array.isArray(c.errors)?`${c.message}: ${c.errors.map(JSON.stringify).join(", ")}`:c.message:`Unknown error: ${JSON.stringify(c)}`}function tr(c,h){const g=c.defaults(h);return Object.assign(function(m,a){const p=g.merge(m,a);if(!p.request||!p.request.hook)return je(g.parse(p));const d=(f,k)=>je(g.parse(g.merge(f,k)));return Object.assign(d,{endpoint:g,defaults:tr.bind(null,g)}),p.request.hook(d,p)},{endpoint:g,defaults:tr.bind(null,g)})}var be=tr(O,{headers:{"user-agent":`octokit-request.js/${sr} ${(0,oe.i)()}`}})},89393:function(L,A,_){_.d(A,{v:function(){return m}});var W=_(7502),oe=_(93222),x=_(31765),q="5.0.6";function V(a){return`Request failed due to following response errors:
`+a.errors.map(p=>` - ${p.message}`).join(`
`)}var B=class extends Error{constructor(a,p,d){super(V(d)),this.request=a,this.headers=p,this.response=d,this.name="GraphqlResponseError",this.errors=d.errors,this.data=d.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},j=["method","baseUrl","url","headers","request","query","mediaType"],fe=["query","method","url"],re=/\/api\/v3\/?$/;function se(a,p,d){if(d){if(typeof p=="string"&&"query"in d)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const R in d)if(fe.includes(R))return Promise.reject(new Error(`[@octokit/graphql] "${R}" cannot be used as variable name`))}const f=typeof p=="string"?Object.assign({query:p},d):p,k=Object.keys(f).reduce((R,M)=>j.includes(M)?(R[M]=f[M],R):(R.variables||(R.variables={}),R.variables[M]=f[M],R),{}),P=f.baseUrl||a.endpoint.DEFAULTS.baseUrl;return re.test(P)&&(k.url=P.replace(re,"/api/graphql")),a(k).then(R=>{if(R.data.errors){const M={};for(const ce of Object.keys(R.headers))M[ce]=R.headers[ce];throw new B(k,M,R.data)}return R.data.data})}function me(a,p){const d=a.defaults(p);return Object.assign((k,P)=>se(d,k,P),{defaults:me.bind(null,d),endpoint:d.endpoint})}var we=me(x.request,{headers:{"user-agent":`octokit-graphql.js/${q} ${(0,W.i)()}`},method:"POST",url:"/graphql"});function Se(a){return me(a,{method:"POST",url:"/graphql"})}const ve=/^v1\./,Te=/^ghs_/,Pe=/^ghu_/;async function er(a){const p=a.split(/\./).length===3,d=ve.test(a)||Te.test(a),f=Pe.test(a);return{type:"token",token:a,tokenType:p?"app":d?"installation":f?"user-to-server":"oauth"}}function Ie(a){return a.split(/\./).length===3?`bearer ${a}`:`token ${a}`}async function rr(a,p,d,f){const k=p.endpoint.merge(d,f);return k.headers.authorization=Ie(a),p(k)}const Le=function(p){if(!p)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if(typeof p!="string")throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return p=p.replace(/^(token|bearer) +/i,""),Object.assign(er.bind(null,p),{hook:rr.bind(null,p)})};var Ye="4.2.1",qe=class{static defaults(a){return class extends this{constructor(...d){const f=d[0]||{};if(typeof a=="function"){super(a(f));return}super(Object.assign({},a,f,f.userAgent&&a.userAgent?{userAgent:`${f.userAgent} ${a.userAgent}`}:null))}}}static plugin(...a){var p;const d=this.plugins;return p=class extends this{},p.plugins=d.concat(a.filter(k=>!d.includes(k))),p}constructor(a={}){const p=new oe.Collection,d={baseUrl:x.request.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},a.request,{hook:p.bind(null,"request")}),mediaType:{previews:[],format:""}};if(d.headers["user-agent"]=[a.userAgent,`octokit-core.js/${Ye} ${(0,W.i)()}`].filter(Boolean).join(" "),a.baseUrl&&(d.baseUrl=a.baseUrl),a.previews&&(d.mediaType.previews=a.previews),a.timeZone&&(d.headers["time-zone"]=a.timeZone),this.request=x.request.defaults(d),this.graphql=Se(this.request).defaults(d),this.log=Object.assign({debug:()=>{},info:()=>{},warn:console.warn.bind(console),error:console.error.bind(console)},a.log),this.hook=p,a.authStrategy){const{authStrategy:k,...P}=a,R=k(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:P},a.auth));p.wrap("request",R.hook),this.auth=R}else if(!a.auth)this.auth=async()=>({type:"unauthenticated"});else{const k=Le(a.auth);p.wrap("request",k.hook),this.auth=k}this.constructor.plugins.forEach(k=>{Object.assign(this,k(this,a))})}};qe.VERSION=Ye,qe.plugins=[];const u="1.0.4";function F(a){a.hook.wrap("request",(p,d)=>{a.log.debug("request",d);const f=Date.now(),k=a.request.endpoint.parse(d),P=k.url.replace(d.baseUrl,"");return p(d).then(R=>(a.log.info(`${k.method} ${P} - ${R.status} in ${Date.now()-f}ms`),R)).catch(R=>{throw a.log.info(`${k.method} ${P} - ${R.status} in ${Date.now()-f}ms`),R})})}F.VERSION=u;var G="6.1.2";function O(a){if(!a.data)return{...a,data:[]};if(!("total_count"in a.data&&!("url"in a.data)))return a;const d=a.data.incomplete_results,f=a.data.repository_selection,k=a.data.total_count;delete a.data.incomplete_results,delete a.data.repository_selection,delete a.data.total_count;const P=Object.keys(a.data)[0],R=a.data[P];return a.data=R,typeof d!="undefined"&&(a.data.incomplete_results=d),typeof f!="undefined"&&(a.data.repository_selection=f),a.data.total_count=k,a}function D(a,p,d){const f=typeof p=="function"?p.endpoint(d):a.request.endpoint(p,d),k=typeof p=="function"?p:a.request,P=f.method,R=f.headers;let M=f.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!M)return{done:!0};try{const ce=await k({method:P,url:M,headers:R}),le=O(ce);return M=((le.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],{value:le}}catch(ce){if(ce.status!==409)throw ce;return M="",{value:{status:200,headers:{},data:[]}}}}})}}function de(a,p,d,f){return typeof d=="function"&&(f=d,d=void 0),_e(a,[],D(a,p,d)[Symbol.asyncIterator](),f)}function _e(a,p,d,f){return d.next().then(k=>{if(k.done)return p;let P=!1;function R(){P=!0}return p=p.concat(f?f(k.value,R):k.value.data),P?p:_e(a,p,d,f)})}var sr=Object.assign(de,{iterator:D}),Oe=null;function je(a){return typeof a=="string"?Oe.includes(a):!1}function Ne(a){return{paginate:Object.assign(de.bind(null,a),{iterator:D.bind(null,a)})}}Ne.VERSION=G;const cr={actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],addSelectedRepoToRequiredWorkflow:["PUT /orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repositories/{repository_id}/environments/{environment_name}/variables"],createOrUpdateEnvironmentSecret:["PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createRequiredWorkflow:["POST /orgs/{org}/actions/required_workflows"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repositories/{repository_id}/environments/{environment_name}/variables/{name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteRequiredWorkflow:["DELETE /orgs/{org}/actions/required_workflows/{required_workflow_id}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getEnvironmentPublicKey:["GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repositories/{repository_id}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoRequiredWorkflow:["GET /repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}"],getRepoRequiredWorkflowUsage:["GET /repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/timing"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getRequiredWorkflow:["GET /orgs/{org}/actions/required_workflows/{required_workflow_id}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repositories/{repository_id}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repositories/{repository_id}/environments/{environment_name}/variables"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoRequiredWorkflows:["GET /repos/{org}/{repo}/actions/required_workflows"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRequiredWorkflowRuns:["GET /repos/{owner}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/runs"],listRequiredWorkflows:["GET /orgs/{org}/actions/required_workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelectedRepositoriesRequiredWorkflow:["GET /orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],removeSelectedRepoFromRequiredWorkflow:["DELETE /orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedReposToRequiredWorkflow:["PUT /orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repositories/{repository_id}/environments/{environment_name}/variables/{name}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"],updateRequiredWorkflow:["PATCH /orgs/{org}/actions/required_workflows/{required_workflow_id}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteCodespacesBillingUsers:["DELETE /orgs/{org}/codespaces/billing/selected_users"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setCodespacesBilling:["PUT /orgs/{org}/codespaces/billing"],setCodespacesBillingUsers:["POST /orgs/{org}/codespaces/billing/selected_users"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{cancelImport:["DELETE /repos/{owner}/{repo}/import"],deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getCommitAuthors:["GET /repos/{owner}/{repo}/import/authors"],getImportStatus:["GET /repos/{owner}/{repo}/import"],getLargeFiles:["GET /repos/{owner}/{repo}/import/large_files"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],mapCommitAuthor:["PATCH /repos/{owner}/{repo}/import/authors/{author_id}"],setLfsPreference:["PATCH /repos/{owner}/{repo}/import/lfs"],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],startImport:["PUT /repos/{owner}/{repo}/import"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"],updateImport:["PATCH /repos/{owner}/{repo}/import"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createInvitation:["POST /orgs/{org}/invitations"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}"],get:["GET /orgs/{org}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /organizations/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /organizations/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /organizations/{org}/personal-access-token-requests"],listPatGrants:["GET /organizations/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers"],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}"],reviewPatGrantRequest:["POST /organizations/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /organizations/{org}/personal-access-token-requests"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /organizations/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /organizations/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployment"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createTagProtection:["POST /repos/{owner}/{repo}/tags/protection"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteTagProtection:["DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disableLfsForRepo:["DELETE /repos/{owner}/{repo}/lfs"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enableLfsForRepo:["PUT /repos/{owner}/{repo}/lfs"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTagProtection:["GET /repos/{owner}/{repo}/tags/protection"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}},tr="7.1.2";function be(a,p){const d={};for(const[f,k]of Object.entries(p))for(const[P,R]of Object.entries(k)){const[M,ce,le]=R,[$e,or]=M.split(/ /),br=Object.assign({method:$e,url:or},ce);d[f]||(d[f]={});const Gr=d[f];if(le){Gr[P]=c(a,f,P,br,le);continue}Gr[P]=a.request.defaults(br)}return d}function c(a,p,d,f,k){const P=a.request.defaults(f);function R(...M){let ce=P.endpoint.merge(...M);if(k.mapToData)return ce=Object.assign({},ce,{data:ce[k.mapToData],[k.mapToData]:void 0}),P(ce);if(k.renamed){const[le,$e]=k.renamed;a.log.warn(`octokit.${p}.${d}() has been renamed to octokit.${le}.${$e}()`)}if(k.deprecated&&a.log.warn(k.deprecated),k.renamedParameters){const le=P.endpoint.merge(...M);for(const[$e,or]of Object.entries(k.renamedParameters))$e in le&&(a.log.warn(`"${$e}" parameter is deprecated for "octokit.${p}.${d}()". Use "${or}" instead`),or in le||(le[or]=le[$e]),delete le[$e]);return P(le)}return P(...M)}return Object.assign(R,P)}function h(a){return{rest:be(a,cr)}}h.VERSION=tr;function g(a){const p=be(a,cr);return{...p,rest:p}}g.VERSION=tr;var E="19.0.11",m=qe.plugin(F,g,Ne).defaults({userAgent:`octokit-rest.js/${E}`})}}]);})();

//# sourceMappingURL=module-octokit.83ff5b66.js.map