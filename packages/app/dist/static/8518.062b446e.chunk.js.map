{"version":3,"file":"static/8518.062b446e.chunk.js","mappings":"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","sources":["webpack://app/../../node_modules/@graphiql/react/dist/comment.es.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nimport { a as codemirror } from \"./codemirror.es.js\";\nfunction _mergeNamespaces(n, m) {\n  m.forEach(function(e) {\n    e && typeof e !== \"string\" && !Array.isArray(e) && Object.keys(e).forEach(function(k) {\n      if (k !== \"default\" && !(k in n)) {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function() {\n            return e[k];\n          }\n        });\n      }\n    });\n  });\n  return Object.freeze(n);\n}\n__name(_mergeNamespaces, \"_mergeNamespaces\");\nvar comment$2 = { exports: {} };\n(function(module, exports) {\n  (function(mod) {\n    mod(codemirror.exports);\n  })(function(CodeMirror) {\n    var noOptions = {};\n    var nonWS = /[^\\s\\u00a0]/;\n    var Pos = CodeMirror.Pos, cmp = CodeMirror.cmpPos;\n    function firstNonWS(str) {\n      var found = str.search(nonWS);\n      return found == -1 ? 0 : found;\n    }\n    __name(firstNonWS, \"firstNonWS\");\n    CodeMirror.commands.toggleComment = function(cm) {\n      cm.toggleComment();\n    };\n    CodeMirror.defineExtension(\"toggleComment\", function(options) {\n      if (!options)\n        options = noOptions;\n      var cm = this;\n      var minLine = Infinity, ranges = this.listSelections(), mode = null;\n      for (var i = ranges.length - 1; i >= 0; i--) {\n        var from = ranges[i].from(), to = ranges[i].to();\n        if (from.line >= minLine)\n          continue;\n        if (to.line >= minLine)\n          to = Pos(minLine, 0);\n        minLine = from.line;\n        if (mode == null) {\n          if (cm.uncomment(from, to, options))\n            mode = \"un\";\n          else {\n            cm.lineComment(from, to, options);\n            mode = \"line\";\n          }\n        } else if (mode == \"un\") {\n          cm.uncomment(from, to, options);\n        } else {\n          cm.lineComment(from, to, options);\n        }\n      }\n    });\n    function probablyInsideString(cm, pos, line) {\n      return /\\bstring\\b/.test(cm.getTokenTypeAt(Pos(pos.line, 0))) && !/^[\\'\\\"\\`]/.test(line);\n    }\n    __name(probablyInsideString, \"probablyInsideString\");\n    function getMode(cm, pos) {\n      var mode = cm.getMode();\n      return mode.useInnerComments === false || !mode.innerMode ? mode : cm.getModeAt(pos);\n    }\n    __name(getMode, \"getMode\");\n    CodeMirror.defineExtension(\"lineComment\", function(from, to, options) {\n      if (!options)\n        options = noOptions;\n      var self = this, mode = getMode(self, from);\n      var firstLine = self.getLine(from.line);\n      if (firstLine == null || probablyInsideString(self, from, firstLine))\n        return;\n      var commentString = options.lineComment || mode.lineComment;\n      if (!commentString) {\n        if (options.blockCommentStart || mode.blockCommentStart) {\n          options.fullLines = true;\n          self.blockComment(from, to, options);\n        }\n        return;\n      }\n      var end = Math.min(to.ch != 0 || to.line == from.line ? to.line + 1 : to.line, self.lastLine() + 1);\n      var pad = options.padding == null ? \" \" : options.padding;\n      var blankLines = options.commentBlankLines || from.line == to.line;\n      self.operation(function() {\n        if (options.indent) {\n          var baseString = null;\n          for (var i = from.line; i < end; ++i) {\n            var line = self.getLine(i);\n            var whitespace = line.slice(0, firstNonWS(line));\n            if (baseString == null || baseString.length > whitespace.length) {\n              baseString = whitespace;\n            }\n          }\n          for (var i = from.line; i < end; ++i) {\n            var line = self.getLine(i), cut = baseString.length;\n            if (!blankLines && !nonWS.test(line))\n              continue;\n            if (line.slice(0, cut) != baseString)\n              cut = firstNonWS(line);\n            self.replaceRange(baseString + commentString + pad, Pos(i, 0), Pos(i, cut));\n          }\n        } else {\n          for (var i = from.line; i < end; ++i) {\n            if (blankLines || nonWS.test(self.getLine(i)))\n              self.replaceRange(commentString + pad, Pos(i, 0));\n          }\n        }\n      });\n    });\n    CodeMirror.defineExtension(\"blockComment\", function(from, to, options) {\n      if (!options)\n        options = noOptions;\n      var self = this, mode = getMode(self, from);\n      var startString = options.blockCommentStart || mode.blockCommentStart;\n      var endString = options.blockCommentEnd || mode.blockCommentEnd;\n      if (!startString || !endString) {\n        if ((options.lineComment || mode.lineComment) && options.fullLines != false)\n          self.lineComment(from, to, options);\n        return;\n      }\n      if (/\\bcomment\\b/.test(self.getTokenTypeAt(Pos(from.line, 0))))\n        return;\n      var end = Math.min(to.line, self.lastLine());\n      if (end != from.line && to.ch == 0 && nonWS.test(self.getLine(end)))\n        --end;\n      var pad = options.padding == null ? \" \" : options.padding;\n      if (from.line > end)\n        return;\n      self.operation(function() {\n        if (options.fullLines != false) {\n          var lastLineHasText = nonWS.test(self.getLine(end));\n          self.replaceRange(pad + endString, Pos(end));\n          self.replaceRange(startString + pad, Pos(from.line, 0));\n          var lead = options.blockCommentLead || mode.blockCommentLead;\n          if (lead != null) {\n            for (var i = from.line + 1; i <= end; ++i)\n              if (i != end || lastLineHasText)\n                self.replaceRange(lead + pad, Pos(i, 0));\n          }\n        } else {\n          var atCursor = cmp(self.getCursor(\"to\"), to) == 0, empty = !self.somethingSelected();\n          self.replaceRange(endString, to);\n          if (atCursor)\n            self.setSelection(empty ? to : self.getCursor(\"from\"), to);\n          self.replaceRange(startString, from);\n        }\n      });\n    });\n    CodeMirror.defineExtension(\"uncomment\", function(from, to, options) {\n      if (!options)\n        options = noOptions;\n      var self = this, mode = getMode(self, from);\n      var end = Math.min(to.ch != 0 || to.line == from.line ? to.line : to.line - 1, self.lastLine()), start = Math.min(from.line, end);\n      var lineString = options.lineComment || mode.lineComment, lines = [];\n      var pad = options.padding == null ? \" \" : options.padding, didSomething;\n      lineComment: {\n        if (!lineString)\n          break lineComment;\n        for (var i = start; i <= end; ++i) {\n          var line = self.getLine(i);\n          var found = line.indexOf(lineString);\n          if (found > -1 && !/comment/.test(self.getTokenTypeAt(Pos(i, found + 1))))\n            found = -1;\n          if (found == -1 && nonWS.test(line))\n            break lineComment;\n          if (found > -1 && nonWS.test(line.slice(0, found)))\n            break lineComment;\n          lines.push(line);\n        }\n        self.operation(function() {\n          for (var i2 = start; i2 <= end; ++i2) {\n            var line2 = lines[i2 - start];\n            var pos = line2.indexOf(lineString), endPos = pos + lineString.length;\n            if (pos < 0)\n              continue;\n            if (line2.slice(endPos, endPos + pad.length) == pad)\n              endPos += pad.length;\n            didSomething = true;\n            self.replaceRange(\"\", Pos(i2, pos), Pos(i2, endPos));\n          }\n        });\n        if (didSomething)\n          return true;\n      }\n      var startString = options.blockCommentStart || mode.blockCommentStart;\n      var endString = options.blockCommentEnd || mode.blockCommentEnd;\n      if (!startString || !endString)\n        return false;\n      var lead = options.blockCommentLead || mode.blockCommentLead;\n      var startLine = self.getLine(start), open = startLine.indexOf(startString);\n      if (open == -1)\n        return false;\n      var endLine = end == start ? startLine : self.getLine(end);\n      var close = endLine.indexOf(endString, end == start ? open + startString.length : 0);\n      var insideStart = Pos(start, open + 1), insideEnd = Pos(end, close + 1);\n      if (close == -1 || !/comment/.test(self.getTokenTypeAt(insideStart)) || !/comment/.test(self.getTokenTypeAt(insideEnd)) || self.getRange(insideStart, insideEnd, \"\\n\").indexOf(endString) > -1)\n        return false;\n      var lastStart = startLine.lastIndexOf(startString, from.ch);\n      var firstEnd = lastStart == -1 ? -1 : startLine.slice(0, from.ch).indexOf(endString, lastStart + startString.length);\n      if (lastStart != -1 && firstEnd != -1 && firstEnd + endString.length != from.ch)\n        return false;\n      firstEnd = endLine.indexOf(endString, to.ch);\n      var almostLastStart = endLine.slice(to.ch).lastIndexOf(startString, firstEnd - to.ch);\n      lastStart = firstEnd == -1 || almostLastStart == -1 ? -1 : to.ch + almostLastStart;\n      if (firstEnd != -1 && lastStart != -1 && lastStart != to.ch)\n        return false;\n      self.operation(function() {\n        self.replaceRange(\"\", Pos(end, close - (pad && endLine.slice(close - pad.length, close) == pad ? pad.length : 0)), Pos(end, close + endString.length));\n        var openEnd = open + startString.length;\n        if (pad && startLine.slice(openEnd, openEnd + pad.length) == pad)\n          openEnd += pad.length;\n        self.replaceRange(\"\", Pos(start, open), Pos(start, openEnd));\n        if (lead)\n          for (var i2 = start + 1; i2 <= end; ++i2) {\n            var line2 = self.getLine(i2), found2 = line2.indexOf(lead);\n            if (found2 == -1 || nonWS.test(line2.slice(0, found2)))\n              continue;\n            var foundEnd = found2 + lead.length;\n            if (pad && line2.slice(foundEnd, foundEnd + pad.length) == pad)\n              foundEnd += pad.length;\n            self.replaceRange(\"\", Pos(i2, found2), Pos(i2, foundEnd));\n          }\n      });\n      return true;\n    });\n  });\n})();\nvar comment = comment$2.exports;\nvar comment$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ _mergeNamespaces({\n  __proto__: null,\n  [Symbol.toStringTag]: \"Module\",\n  \"default\": comment\n}, [comment$2.exports]));\nexport { comment$1 as c };\n"],"names":["__defProp","__name","target","value","_mergeNamespaces","n","m","e","k","comment$2","module","exports","mod","CodeMirror","noOptions","nonWS","Pos","cmp","firstNonWS","str","found","cm","options","minLine","ranges","mode","i","from","to","probablyInsideString","pos","line","getMode","self","firstLine","commentString","end","pad","blankLines","baseString","whitespace","cut","startString","endString","lastLineHasText","lead","atCursor","empty","start","lineString","lines","didSomething","lineComment","i2","line2","endPos","startLine","open","endLine","close","insideStart","insideEnd","lastStart","firstEnd","almostLastStart","openEnd","found2","foundEnd","comment","comment$1"],"sourceRoot":""}